tt(SYSTEM) takes one argument: a command to execute. The command is run via
the standard C function tt(system). The presence of this function in the Yodl
language introduces the danger of em(live data). Imagine someone sending you a
document containing
        verb(
    SYSTEM(rm *)
        )
    To avoid such malevolent side effects, YODL has a flag tt(-l) to define
the `live data policy'. By default, tt(-l0) is implied which suppresses the
tt(SYSTEM) function and the related tt(PIPETHROUGH) function. See also section
ref(USING).

Despite the potential danger, tt(SYSTEM) can be useful in many ways. E.g., you
might want to log when someone processes your document, as in:
        verb(
    SYSTEM(echo Document processed! | mail myself@my.host)
        )
    Note that tt(SYSTEM) merely performs an system-related task. It's a
process that is separated from the YODL process itself. One of the
consequences of this is that any output generated by tt(SYSTEM) will not
normally appear into YODL's output file. If the output of a subprocess should
be inserted into YODL's output file, either use
lref(PIPETHROUGH)(PIPETHROUGH), or insert a temporary file as shown in the
following example:
        verb(
    SYSTEM(date > datefile)
    The current date is: 
    INCLUDEFILE(datefile)
    SYSTEM(rm datefile)
        )


